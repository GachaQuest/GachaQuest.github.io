import { QueryKey, QueryObserverOptions } from 'react-query';
import { WritableAtom } from 'jotai';
import { CreateQueryOptions, GetQueryClient } from './types';
declare type AtomWithQueryAction = {
    type: 'refetch';
};
export interface AtomWithQueryOptions<TQueryFnData, TError, TData, TQueryData> extends QueryObserverOptions<TQueryFnData, TError, TData, TQueryData> {
    queryKey: QueryKey;
}
export interface AtomWithQueryOptionsWithEnabled<TQueryFnData, TError, TData, TQueryData> extends Pick<AtomWithQueryOptions<TQueryFnData, TError, TData, TQueryData>, Exclude<keyof AtomWithQueryOptions<TQueryFnData, TError, TData, TQueryData>, 'enabled'>> {
    enabled: boolean;
}
export declare function atomWithQuery<TQueryFnData, TError, TData = TQueryFnData, TQueryData = TQueryFnData>(createQuery: CreateQueryOptions<AtomWithQueryOptionsWithEnabled<TQueryFnData, TError, TData, TQueryData>>, getQueryClient?: GetQueryClient): WritableAtom<TData | TQueryData | undefined, AtomWithQueryAction, void | Promise<void>>;
export declare function atomWithQuery<TQueryFnData, TError, TData = TQueryFnData, TQueryData = TQueryFnData>(createQuery: CreateQueryOptions<AtomWithQueryOptions<TQueryFnData, TError, TData, TQueryData>>, getQueryClient?: GetQueryClient): WritableAtom<TData, AtomWithQueryAction, Promise<void>>;
export {};
