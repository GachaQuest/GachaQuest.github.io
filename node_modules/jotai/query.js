'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var reactQuery = require('react-query');
var jotai = require('jotai');

var queryClientAtom = jotai.atom(new reactQuery.QueryClient());

function atomWithQuery(createQuery, getQueryClient) {
  if (getQueryClient === void 0) {
    getQueryClient = function getQueryClient(get) {
      return get(queryClientAtom);
    };
  }

  var queryDataAtom = jotai.atom(function (get) {
    var queryClient = getQueryClient(get);
    var options = typeof createQuery === 'function' ? createQuery(get) : createQuery;
    var defaultedOptions = queryClient.defaultQueryOptions(options);
    var observer = new reactQuery.QueryObserver(queryClient, defaultedOptions);
    var initialResult = observer.getCurrentResult();
    var resolve = null;
    var resultAtom = jotai.atom(initialResult.data === undefined && options.enabled !== false ? new Promise(function (r) {
      resolve = r;
    }) : initialResult);

    var setResult = function setResult() {
      throw new Error('setting result without mount');
    };

    var state = {
      isMounted: false,
      unsubscribe: null
    };

    var listener = function listener(result) {
      if (result.isFetching || !result.isError && result.data === undefined) {
        return;
      }

      if (resolve) {
        setTimeout(function () {
          if (!state.isMounted) {
            state.unsubscribe == null ? void 0 : state.unsubscribe();
            state.unsubscribe = null;
          }
        }, 1000);
        resolve(result);
        resolve = null;
      } else {
        setResult(result);
      }
    };

    if (options.enabled !== false) {
      state.unsubscribe = observer.subscribe(listener);
    }

    resultAtom.onMount = function (update) {
      setResult = update;
      state.isMounted = true;

      if (options.enabled !== false && !state.unsubscribe) {
        state.unsubscribe = observer.subscribe(listener);
        listener(observer.getCurrentResult());
      }

      return function () {
        return state.unsubscribe == null ? void 0 : state.unsubscribe();
      };
    };

    return {
      options: options,
      resultAtom: resultAtom,
      observer: observer,
      state: state
    };
  }, function (get, set, action) {
    var _get2 = get(queryDataAtom),
        options = _get2.options,
        resultAtom = _get2.resultAtom,
        observer = _get2.observer,
        state = _get2.state;

    if (options.enabled === false) {
      return;
    }

    switch (action.type) {
      case 'refetch':
        {
          set(resultAtom, new Promise(function () {}));

          if (!state.isMounted) {
            state.unsubscribe == null ? void 0 : state.unsubscribe();
            state.unsubscribe = null;
          }

          return observer.refetch({
            cancelRefetch: true
          }).then(function (result) {
            set(resultAtom, result);
          });
        }
    }
  });
  var queryAtom = jotai.atom(function (get) {
    var _get3 = get(queryDataAtom),
        resultAtom = _get3.resultAtom;

    var result = get(resultAtom);

    if (result.isError) {
      throw result.error;
    }

    return result.data;
  }, function (_get, set, action) {
    return set(queryDataAtom, action);
  });
  return queryAtom;
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

var _excluded = ["type"];
function atomWithInfiniteQuery(createQuery, getQueryClient) {
  if (getQueryClient === void 0) {
    getQueryClient = function getQueryClient(get) {
      return get(queryClientAtom);
    };
  }

  var queryDataAtom = jotai.atom(function (get) {
    var queryClient = getQueryClient(get);
    var options = typeof createQuery === 'function' ? createQuery(get) : createQuery;
    var defaultedOptions = queryClient.defaultQueryOptions(options);
    var observer = new reactQuery.InfiniteQueryObserver(queryClient, defaultedOptions);
    var initialResult = observer.getCurrentResult();
    var resolve = null;
    var resultAtom = jotai.atom(initialResult.data === undefined && options.enabled !== false ? new Promise(function (r) {
      resolve = r;
    }) : initialResult);

    var setResult = function setResult() {
      throw new Error('setting result without mount');
    };

    var state = {
      isMounted: false,
      unsubscribe: null
    };

    var listener = function listener(result) {
      if (result.isFetching || !result.isError && result.data === undefined || result.isError && reactQuery.isCancelledError(result.error)) {
        return;
      }

      if (resolve) {
        setTimeout(function () {
          if (!state.isMounted) {
            state.unsubscribe == null ? void 0 : state.unsubscribe();
            state.unsubscribe = null;
          }
        }, 1000);
        resolve(result);
        resolve = null;
      } else {
        setResult(result);
      }
    };

    if (options.enabled !== false) {
      state.unsubscribe = observer.subscribe(listener);
    }

    resultAtom.onMount = function (update) {
      setResult = update;
      state.isMounted = true;

      if (options.enabled !== false && !state.unsubscribe) {
        state.unsubscribe = observer.subscribe(listener);
        listener(observer.getCurrentResult());
      }

      return function () {
        return state.unsubscribe == null ? void 0 : state.unsubscribe();
      };
    };

    return {
      options: options,
      resultAtom: resultAtom,
      observer: observer,
      state: state
    };
  }, function (get, set, action) {
    var _get2 = get(queryDataAtom),
        options = _get2.options,
        resultAtom = _get2.resultAtom,
        observer = _get2.observer,
        state = _get2.state;

    if (options.enabled === false) {
      return;
    }

    switch (action.type) {
      case 'refetch':
        {
          set(resultAtom, new Promise(function () {}));

          if (!state.isMounted) {
            state.unsubscribe == null ? void 0 : state.unsubscribe();
            state.unsubscribe = null;
          }

          action.type;
              var rest = _objectWithoutPropertiesLoose(action, _excluded);

          observer.refetch(rest).then(function (result) {
            set(resultAtom, result);
          });
          return;
        }

      case 'fetchPreviousPage':
        {
          observer.fetchPreviousPage();
          return;
        }

      case 'fetchNextPage':
        {
          observer.fetchNextPage();
          return;
        }
    }
  });
  var queryAtom = jotai.atom(function (get) {
    var _get3 = get(queryDataAtom),
        resultAtom = _get3.resultAtom;

    var result = get(resultAtom);

    if (result.isError) {
      throw result.error;
    }

    return result.data;
  }, function (_get, set, action) {
    return set(queryDataAtom, action);
  });
  return queryAtom;
}

exports.atomWithInfiniteQuery = atomWithInfiniteQuery;
exports.atomWithQuery = atomWithQuery;
exports.queryClientAtom = queryClientAtom;
